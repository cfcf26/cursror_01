---
description: Supabase 사용 패턴 및 가이드라인
---
# Supabase 사용 가이드

## Supabase 클라이언트
- 설정 파일: [lib/supabase.ts](mdc:lib/supabase.ts)
- 모든 Supabase 작업은 이 클라이언트를 통해 수행

```typescript
import { supabase } from '@/lib/supabase';
```

## 데이터베이스 작업

### SELECT 쿼리
```typescript
const { data, error } = await supabase
  .from('products')
  .select('*')
  .eq('area', userArea);

if (error) {
  console.error('Error fetching products:', error);
  return;
}
```

### INSERT
```typescript
const { data, error } = await supabase
  .from('products')
  .insert({
    user_id: userId,
    title: title,
    description: description,
    price: price,
    area: area,
  })
  .select()
  .single();
```

### UPDATE
```typescript
const { error } = await supabase
  .from('products')
  .update({ title: newTitle })
  .eq('id', productId);
```

### DELETE
```typescript
const { error } = await supabase
  .from('products')
  .delete()
  .eq('id', productId);
```

## 인증 (Authentication)

### 회원가입
```typescript
const { data, error } = await supabase.auth.signUp({
  email: email,
  password: password,
});
```

### 로그인
```typescript
const { data, error } = await supabase.auth.signInWithPassword({
  email: email,
  password: password,
});
```

### 로그아웃
```typescript
const { error } = await supabase.auth.signOut();
```

### 현재 사용자 가져오기
```typescript
const { data: { user } } = await supabase.auth.getUser();
```

### 세션 확인
```typescript
const { data: { session } } = await supabase.auth.getSession();
```

## 실시간 (Realtime)

### 채팅 메시지 구독
```typescript
const channel = supabase
  .channel(`room-${roomId}`)
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'chat_messages',
      filter: `room_id=eq.${roomId}`,
    },
    (payload) => {
      // 새 메시지 처리
      setMessages(prev => [...prev, payload.new as ChatMessage]);
    }
  )
  .subscribe();

// 클린업
return () => {
  supabase.removeChannel(channel);
};
```

## 에러 핸들링

### 표준 에러 처리 패턴
```typescript
const { data, error } = await supabase
  .from('products')
  .select('*');

if (error) {
  console.error('Database error:', error.message);
  // 사용자에게 에러 알림 (토스트 등)
  return null;
}

return data;
```

## Row Level Security (RLS)

### 정책 이해
- Supabase는 RLS를 통해 데이터 보안 강화
- 사용자는 자신의 지역(area)의 상품만 조회 가능
- 자신이 작성한 상품만 수정/삭제 가능
- 스키마 정의: [docs/supabase-schema.sql](mdc:docs/supabase-schema.sql)

### 쿼리 작성 시 고려사항
- RLS 정책에 따라 자동 필터링됨
- 명시적 필터링도 추가하여 명확성 확보

```typescript
// RLS가 있어도 명시적으로 필터링
const { data } = await supabase
  .from('products')
  .select('*')
  .eq('area', userArea)
  .eq('user_id', userId); // 내 상품만
```

## 타입 안정성

### Supabase 응답 타입
```typescript
import { Product } from '@/types';

const { data, error } = await supabase
  .from('products')
  .select('*')
  .returns<Product[]>();
```

## 모범 사례

1. **항상 에러 체크**: 모든 Supabase 작업 후 error 확인
2. **타입 명시**: 가능하면 반환 타입 명시
3. **환경 변수 사용**: API 키는 환경 변수로 관리
4. **구독 정리**: Realtime 구독은 useEffect cleanup에서 제거
5. **로딩 상태**: 비동기 작업 중 로딩 표시
6. **사용자 피드백**: 성공/실패 시 사용자에게 알림

## Next.js App Router와 통합

### Server Component에서 사용
```typescript
// app/products/page.tsx
import { supabase } from '@/lib/supabase';

export default async function ProductsPage() {
  const { data: products } = await supabase
    .from('products')
    .select('*');
  
  return (
    <div>
      {/* 상품 목록 렌더링 */}
    </div>
  );
}
```

### Client Component에서 사용
```typescript
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';

export default function ClientComponent() {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    async function fetchData() {
      const { data } = await supabase.from('products').select('*');
      setData(data || []);
    }
    fetchData();
  }, []);
  
  return <div>{/* ... */}</div>;
}
```
